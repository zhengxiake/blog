(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{454:function(t,a,s){"use strict";s.r(a);var n=s(3),e=Object(n.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"vue-项目实战上传文件与接口options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-项目实战上传文件与接口options","aria-hidden":"true"}},[t._v("#")]),t._v(" Vue 项目实战上传文件与接口OPTIONS")]),t._v(" "),s("p",[t._v("在项目的开发过程中难免会遇到许多的坑，寻找答案成为了至关重要的一步，职场中解决问题的能力是必要切重要的，有些问题网上给的答案大多都是千篇一律重复性东西太多，而且还不能解决问题。往往花费很多时间把自己带进了坑里。")]),t._v(" "),s("p",[t._v("因此把自己遇到的一些问题记录下来，以免后面再次遇到不知所措。")]),t._v(" "),s("p",[t._v("项目使用的是 vue + element + axois。")]),t._v(" "),s("h3",{attrs:{id:"_1-前端发送的是否为-ajax-请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-前端发送的是否为-ajax-请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 前端发送的是否为 Ajax 请求")]),t._v(" "),s("p",[t._v("在做用户超时登录时当用户超时后，前端发送请求后端会返回 401 结果。这里采用的是 axios 添加请求拦截的方式实现。")]),t._v(" "),s("p",[t._v("不过在过程中出现的问题是，在用户超时之后，前端发送请求始终没有返回结果。而代码并没有问题，最后排查得知后端对请求接口做了一次判断接口是不是 Ajax 请求。")]),t._v(" "),s("p",[t._v("为了满足后端的要求，需要我们发送的接口为 Ajax 请求。所以设置接口的 header 即可。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("axios"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interceptors"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("use")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  config"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("headers"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'X-Requested-With'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'XMLHttpRequest'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" config\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("当然了，这里是服务器用来检测是否为异步，如果你的服务器没做任何针对的反馈，那就不会出现这个问题了。")]),t._v(" "),s("h3",{attrs:{id:"_2-上传文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-上传文件","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 上传文件")]),t._v(" "),s("p",[t._v("项目中需要导入 Excel 数据功能，这里直接使用的是 Element 的 Upload 组件 。")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("el"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("upload action "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("show"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("list"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"false"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("request"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"devUpload"')]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("el"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("button\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"reset-btn"')]),t._v("\n      type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"primary"')]),t._v("\n      icon"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"iconfont icon-import"')]),t._v("\n      size"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"small"')]),t._v("\n      plain\n    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("批量导入"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("el"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("button"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("el"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("upload"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("如上所示，由于原有的功能不能满足后台给定的上传接口，所以这里使用了自定义上传功能「http-request」属性。")]),t._v(" "),s("p",[t._v("实现上传功能时，有一点需要注意，这里后端需要接收的是 「MultipartFile」类型。")]),t._v(" "),s("p",[t._v("一开始总是出现前端传过去的数据类型和「MultipartFile」不一致，查阅了一些资料，很多都是说设置请求接口的 Header 的 「Content-Type」 属性 为 「multipart/form-data」，或者 xxx。")]),t._v(" "),s("p",[t._v("也尝试了这种做法还是不行。结果直接使用 axios 默认设置即可，我们不需要要修改什么。")]),t._v(" "),s("p",[t._v("不过我们传入的参数需要使用 fromData 类型。正确做法如下：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[t._v("devUpload")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fileObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" param "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FormData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    param"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("append")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"file"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fileObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("file"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    axios"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("post")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/import"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" param"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-axios-发送-options-请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-axios-发送-options-请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. axios 发送 OPTIONS 请求")]),t._v(" "),s("p",[t._v("因为刚开始使用 axios 不久，之前大多都是使用 Jquery 的 Ajax 请求，没有出现过每次请求会多一个 OPTIONS 请求的情况。于是就在网上查看了原因大致如下。")]),t._v(" "),s("p",[t._v("首先，跨域请求分为「简单请求」和「复杂请求」。而复杂请求会先发送一个预检请求 options。")]),t._v(" "),s("p",[t._v("哪些是复杂请求：")]),t._v(" "),s("p",[t._v("1、请求方法不是 GET/HEAD/POST。\n2、如果是 POST 请求，但 Content-Type 不是 application/x-www-form-urlencoded, multipart/form-data, 或text/plain，这三种类型。\n3、请求设置了自定义的 header 字段。")]),t._v(" "),s("p",[t._v("如果不想发送 options 请求，改为简单请求即可。")]),t._v(" "),s("p",[t._v("比如将 Content-Type 的类型 改为 application/x-www-form-urlencoded，或者其他方式。")]),t._v(" "),s("p",[t._v("这也是为什么 Jquery 的 Ajax 没有发送 options 请求的原因，因为它本身默认发送的类型是 application/x-www-form-urlencoded。")])])},[],!1,null,null,null);a.default=e.exports}}]);